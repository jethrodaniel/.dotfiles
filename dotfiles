#!/usr/bin/env bash

this_dir=$(dirname $(readlink -f $0))
source "${this_dir}/helpers.sh"

# From <https://docs.brew.sh/Homebrew-on-Linux>
setup_homebrew() {
  sudo apt-get install build-essential curl file git gcc

  git clone https://github.com/Homebrew/brew ~/.linuxbrew/Homebrew
  mkdir -p ~/.linuxbrew/bin
  ln -sf ../Homebrew/bin/brew ~/.linuxbrew/bin
  eval $(~/.linuxbrew/bin/brew shellenv)

  brew install core
}

install_gems() {
  # From <https://github.com/jethrodaniel/.git-hooks>
  gem install overcommit \
    && overcommit --install \
    && git clone https://github.com/jethrodaniel/.git-hooks \
    && cp .git-hooks/.overcommit.yml.example .overcommit.yml \
    && overcommit --sign \
    && overcommit --sign prepare-commit-msg \
    && overcommit --sign commit-msg

  gem install ripper-tags
  gem install gem-ripper-tags
  gem ripper_tags

  gem install gem-browse
}

install_dotfiles() {
  sudo apt-get update

  setup_homebrew

  if [ "$verbose" == 'true' ]; then
    brew_flags='--display-times --debug'
  else
    brew_flags='--display-times'
  fi

  brew install $brew_flags \
    git \
    vim \
    homeshick \
    tree \
    hub \
    xclip \
    rbenv \
    pyenv \
    tmux \
    curl \
    feh \
    fish \
    figlet \
    tig \
    hunspell \
    conan \
    xmlstarlet

  # Slow `brew install`s
  #
  # Don't include these on travis, since travis will kill the build if it
  # receives no log output in 10 min.
  #
  if [ "$CI" != true ]; then
    brew install $brew_flags gdb
  fi

  # Forgot why this is needed
  brew link --overwrite fish

  # Answer `yes` to all 'Overwrite existing file?' questions
  yes | homeshick clone jethrodaniel/dotfiles

  sudo apt-get install -y \
    x11-xkb-utils \
    i3 \
    pavucontrol \
    ttf-ancient-fonts

  install_gems

  # Symlink tmux settings into the home dir
  ln -fs ~/.tmux/conf ~/.tmux.conf

  say <<-MSG
		Done. Be sure to run

			\`prefix+I\` inside tmux, then reopen tmux.
	MSG
}

PROGNAME=$0

usage() {
  cat <<-EOF
		Usage: $PROGNAME [-v] [-y] [install]

		Commands
		  install    Installs these dotfiles
		  <blank>    With no options, shows usage

		Options
		  -y    Reply \`y\` to any prompts
		  -v    Be verbose

	EOF
}

install() {
  # Parse options
  while getopts ':vy' o; do
    case $o in
      v) verbose=true
        ;;
      y) force_yes=true
        ;;
      *)
    esac
  done
  shift $((OPTIND-1))

  if [ "$1" != 'install' ]; then
    usage
    exit
  fi

  say <<-MSG
		Setting up dotfiles...

		This is probably going to take a while. Time for â˜•.
	MSG

  confirmation=`cat <<-MSG

		Sure you want to install? It's gonna be like an hour or more.

		And will currently just try to overwrite everything.

    ðŸ’£
	MSG`

  if [ "$force_yes" = 'true' ] || $(ask "$confirmation"); then
    echo 'Installing the dotfiles...'
    install_dotfiles
  else
    echo 'Exiting...'
  fi
}
install $@
